import datetime
from math import ceil
import yookassa
import asyncio
import uuid
from datetime import timedelta
import pytz
from aiogram.fsm.context import FSMContext
from aiogram import Router,Bot, types, F
from aiogram.filters import CommandStart,Command
import kbds
from payment import create_pay,check_pay,success_pay,create_payout
from fsm_promocode import AddCode

from get_data import *
from datetime import datetime
user_private_router=Router()



from promotion import task
bot_link=f"https://t.me/{os.getenv('link')}?start="
from  promotion import  scheduler



@user_private_router.message(CommandStart())
async def start(message:types.Message,bot:Bot,state:FSMContext):
    from promotion import scheduler, task_time
    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)


    print(task_time)
    await state.clear()
    # await ssh_connect_and_update_db()
    user_id = message.from_user.id
    u = await getuser(user_id)
    command_text = message.text
    company=""
    # print(await get_promotion())
    if u:
        print("user exists")

    else:
        data = {
            "user_id": user_id,
            "expires_at": (now + timedelta(days=0)).isoformat(),
            "days":2,
            "company": company
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await postuser(data)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        args = command_text.split(maxsplit=1)[1] if len(command_text.split()) > 1 else None

        if args:

            if args.isdigit():
                company_data = {
                    "user_id": user_id,
                    "company": int(args)
                }
                print(args)
                param = args
                uparam = await getuser(param)
                ref_user_id = int(param)

                ref_user = await getuser(ref_user_id)
                if ref_user:
                    expires_at_str = ref_user.get("expires_at")


                    expires_at = None

                    if expires_at_str:
                        try:
                            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É-–≤—Ä–µ–º—è
                            expires_at = datetime.fromisoformat(expires_at_str).astimezone(moscow_tz)
                        except ValueError:
                            try:
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã
                                time_obj = datetime.strptime(expires_at_str, "%H:%M:%S.%f").time()
                            except ValueError:
                                try:
                                    time_obj = datetime.strptime(expires_at_str, "%H:%M:%S").time()
                                except Exception:
                                    time_obj = None

                            if time_obj:
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
                                expires_at = datetime.combine(now.date(), time_obj)
                                expires_at = moscow_tz.localize(expires_at)
                            else:
                                expires_at = now
                    else:
                        expires_at = now

                    # –î–æ–±–∞–≤–ª—è–µ–º 50 –¥–Ω–µ–π
                    new_expires_at = expires_at + timedelta(days=50)
                    if uparam['task']:
                        refdata = {
                            "user_id": ref_user_id,
                            "expires_at": new_expires_at.isoformat()
                        }
                    else:
                        refdata = {
                            "user_id": ref_user_id,
                            "days": uparam['days'] + 50
                        }
                    await bot.send_message(
                        ref_user_id,
                        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è, –Ω–∞ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
                        reply_markup=kbds.createkb({"–û—Ç–ª–∏—á–Ω–æ": "thanks"})
                    )

                    await putsubuser(refdata)

                else:
                    await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.")
            elif args.startswith("company_"):
                param = args.split("company_")
                print(param[1])
                company_data = {
                    "user_id": user_id,
                    "company": param[1]
                }


            else:
                company_data = {
                    "user_id": user_id,
                    "company": "Default"
                }
            u = await getuser(user_id)
            if not u["company"]:
                await putsubuser(company_data)
        else:
            u = await getuser(user_id)
            company_data = {
                "user_id": user_id,
                "company": 'Default'
            }
            if not u["company"]:
                await putsubuser(company_data)



    u = await getuser(user_id)

    moscow_tz = pytz.timezone("Europe/Moscow")
    moscow_time = datetime.now(moscow_tz)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    remaining_time_str = u.get('expires_at') # –Ω–∞–ø—Ä–∏–º–µ—Ä, '2025-05-19T12:13:24+03:00'
    if u['task']:
        if remaining_time_str:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            expires_at = datetime.fromisoformat(remaining_time_str).astimezone(moscow_tz)

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Å–µ–π—á–∞—Å
            delta = expires_at - moscow_time
            total_seconds = max(delta.total_seconds(), 0)

            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π, —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
            days = int(total_seconds // 86400)  # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
            hours = int((total_seconds % 86400) // 3600)  # –æ—Å—Ç–∞—Ç–æ–∫ —á–∞—Å–æ–≤
            minutes = int((total_seconds % 3600) // 60)  # –æ—Å—Ç–∞—Ç–æ–∫ –º–∏–Ω—É—Ç
        else:
            days = 0  # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
            hours = 0
             # –æ—Å—Ç–∞—Ç–æ–∫ —á–∞—Å–æ–≤
            minutes = 0  # –æ—Å—Ç–∞—Ç–æ–∫ –º–∏–Ω—É—Ç
    else:
        days=u['days']
        hours = 0
        minutes = 0
    if message.from_user.id in [1059422557,7287871980]:
        remaining_text = f"–î–Ω–µ–π:{days}–ß–∞—Å–æ–≤:{hours}–ú–∏–Ω—É—Ç:{minutes}"
    else:
        remaining_text = f"{days} –ö–ï–î–û–î–ù–ï–ô"
    prom = await get_promotion()
    kbl= {"üï∂ –ü–æ–¥–ø–∏—Å–∫–∞" : "sub", "‚ùóÔ∏è–ü–æ–¥–∫–ª—é—á–∏—Ç—å": "connect", "üöÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "url>>https://t.me/kedoask911",
         "‚ö°Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è": f"url*{bot_link}{user_id}"}
    if user_id==1059422557:
        kbl["–û—Ç–∫–ª—é—á–∏—Ç—å"]="my_device"
    await message.answer(f"–í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê {remaining_text}",reply_markup=kbds.sharekb(kbl))


@user_private_router.callback_query(F.data.startswith("menu"))
async def menu(call:types.CallbackQuery):
    user_id=call.from_user.id
    u = await getuser(user_id)
    moscow_tz = pytz.timezone("Europe/Moscow")
    moscow_time = datetime.now(moscow_tz)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    remaining_time_str = u.get('expires_at')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, '2025-05-19T12:13:24+03:00'
    if u['task']:
        if remaining_time_str:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            expires_at = datetime.fromisoformat(remaining_time_str).astimezone(moscow_tz)

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Å–µ–π—á–∞—Å
            delta = expires_at - moscow_time
            total_seconds = max(delta.total_seconds(), 0)

            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π, —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
            days = int(total_seconds // 86400)  # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
            hours = int((total_seconds % 86400) // 3600)  # –æ—Å—Ç–∞—Ç–æ–∫ —á–∞—Å–æ–≤
            minutes = int((total_seconds % 3600) // 60)  # –æ—Å—Ç–∞—Ç–æ–∫ –º–∏–Ω—É—Ç
        else:
            days=0
    else:
        days = u['days']
        hours = 0
        minutes = 0

    remaining_text = f"{days} –ö–ï–î–û–î–ù–ï–ô"


    await call.message.edit_text(f"–í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê {remaining_text}",reply_markup=kbds.sharekb(
        {"üï∂ –ü–æ–¥–ø–∏—Å–∫–∞" : "sub", "‚ùóÔ∏è–ü–æ–¥–∫–ª—é—á–∏—Ç—å": "connect", "üöÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "url>>https://t.me/kedoask911",
         "‚ö°Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è": f"url*{bot_link}{user_id}"}))
    #
    # await message.answer()

@user_private_router.callback_query(F.data.startswith("sub"))
async def sub_menu(call:types.CallbackQuery,state:FSMContext):
    from promotion import promotion
    await state.clear()
    user_id = call.from_user.id
    payment=call.data.split("_")[-1]

    if scheduler.get_job(f"paytask_{user_id}"):
        if payment:
            try:
                get_payment = await asyncio.to_thread(yookassa.Payment.find_one, payment)

                if get_payment.status == "pending":
                    idempotence_key = str(uuid.uuid4())

                    print(get_payment.status)
                    await call.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")


            except Exception as e:
                    print(e)
            


    # t= await gettime()
    t={30:72,90:189,180:324,360:540}

    l={ f"{day} –¥–Ω–µ–π {price}‚ÇΩ":f"time_{day}_{price}" for day,price in t.items()}





    l["–ù–∞–∑–∞–¥"]="menu"


    await call.message.edit_text("*–í–Ω–µ–∑–∞–ø–Ω–∞—è –∞–∫—Ü–∏—è\\!* –°–µ–≥–æ–¥–Ω—è —Å 10\\:00 –¥–æ 20\\:00 –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ª—é–±–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\\!" if promotion else "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –æ–ø–ª–∞—Ç—ã",reply_markup=kbds.createkb(l,2,2,back=True,mod=True),parse_mode="MarkdownV2")

@user_private_router.callback_query(F.data.startswith("time"))
async def time_menu(call:types.CallbackQuery,bot:Bot):

    user_id=call.from_user.id
    # from payment import pay
    from promotion import promotion
    c=call.data.split("_")
    # print(c)
    c_day=c[1]
    # print(c_time)
    # c_name=c[2]
    c_price=c[2]


    # try:
    #
    #     c_promo=c[4]
    #     if c_promo and not promotion:
    #         t = await gettime()
    #         l = {f'{i["time"]}' if i["time"].split(" ")[
    #                                    1] == "–º–µ—Å" else f'{i["time"]}': f'time_{float(i["time"].split(" ")[0]) * 30}_{i["time"]}_{float(i["time"].split(" ")[0]) * 200}' if
    #         i["time"].split(" ")[
    #             1] == "–º–µ—Å" else f'time_{float(i["time"].split(" ")[0]) * 360}_{i["time"]}_{float(i["time"].split(" ")[0]) * (2400)}'
    #              for i in t}
    #         await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –æ–ø–ª–∞—Ç—ã",reply_markup=kbds.createkb(l,2,2,back=True,mod=True),parse_mode="MarkdownV2")
    #         return
    #     print(c_promo)
    # except:
    #     ...
    end_time = datetime.now() + timedelta(minutes=10)
    link,payment=await create_pay(c_price)

    text= f"–û–ø–ª–∞—Ç–∞ {c_day} –¥–Ω–µ–π —Å–æ—Å—Ç–∞–≤–∏—Ç"

    pay_message=await call.message.edit_text(f"{text} {c_price} —Ä—É–±–ª–µ–π!\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!",reply_markup = kbds.sharekb({
    f"–û–ø–ª–∞—Ç–∏—Ç—å": f"url>>{link}",
    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": f"cf_{payment}cf_{c_price}cf_{c_day}",
    "–ù–∞–∑–∞–¥": f"sub_{payment}"}))


async def pay_task(pay_message_id,payment,price,day,user_id,bot:Bot,end_time):
    if datetime.now()>=end_time:
        try:
            get_payment = await asyncio.to_thread(yookassa.Payment.find_one, payment)
            if get_payment.status == "pending":
                idempotence_key = str(uuid.uuid4())
                await asyncio.to_thread(yookassa.Payment.cancel, payment, idempotence_key)
        except Exception as e:
            print(f"Error canceling payment: {e}")
        await bot.delete_message(user_id,pay_message_id)
        await bot.send_message(user_id,"–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–æ!",reply_markup=kbds.createkb({"–ú–µ–Ω—é":"menu"}))
        scheduler.remove_job(f"paytask_{user_id}")
        return
    if payment:
        try:
            get_payment = await asyncio.to_thread(yookassa.Payment.find_one, payment)


            if get_payment.status == 'waiting_for_capture':

                captured = await asyncio.to_thread(yookassa.Payment.capture, payment)


                if captured.status == 'succeeded':
                    result = await success_pay(user_id, price, day)
                    await bot.delete_message(user_id, pay_message_id)
                    if result:
                        await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
                                               reply_markup=kbds.createkb({"–ú–µ–Ω—é": "menu"}))
                    else:
                        await bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                                               reply_markup=kbds.createkb({"–ú–µ–Ω—é": "menu"}))
                    scheduler.remove_job(f"paytask_{user_id}")  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                else:
                    await bot.delete_message(user_id, pay_message_id)
                    await bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=kbds.createkb({"–ú–µ–Ω—é": "menu"}))
                    scheduler.remove_job(f"paytask_{user_id}")  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            else:
                ...
                # –ù–µ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        except Exception as e:
            print(f"Error fetching payment: {e}")

            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", reply_markup=kbds.createkb({"–ú–µ–Ω—é": "menu"}))
            scheduler.remove_job(f"paytask_{user_id}")  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


@user_private_router.callback_query(F.data.startswith("promcode_"))
async def promocode(call:types.CallbackQuery,state:FSMContext):
    await call.message.edit_text("–ê–∫—Ç–∏–≤–∏—Ä—É–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!",reply_markup=kbds.createkb({"–ù–∞–∑–∞–¥":"sub"}))
    await state.set_state(AddCode.name)





@user_private_router.callback_query(F.data.startswith("connect"))
async def connect_menu(call:types.CallbackQuery):
    user_id=call.from_user.id

    device={"iPhone":1,"MacOS":2,"Android":3,"Windows":4}
    l={device_name:f'device_{device_id}_{device_name}' for device_name,device_id in device.items()}
    # l={i["name"]:f'device_{i["id"]}_{i["name"]}' for i in g}
    l["–ù–∞–∑–∞–¥"] = "menu"

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",reply_markup=kbds.createkb(l,mod=True))





@user_private_router.callback_query(F.data.startswith("device_"))
async def device_menu(call:types.CallbackQuery):
    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)
    user_id=call.from_user.id
    c_data = call.data.split("_")
    c_id=c_data[1]
    c_name=c_data[2]
    u=await getuser(user_id)

    if u.get("expires_at"):
        expires_at = datetime.fromisoformat(u["expires_at"]).astimezone(moscow_tz)
    else:
        expires_at = now.astimezone(moscow_tz)

    if expires_at > now or u.get("days")>0:
        if u.get("days")>0 and not u.get("task"):
            putdata = {
                "user_id":user_id,
                "task":True,
                "days":0,
                "expires_at":(now.astimezone(moscow_tz) + timedelta(days= u.get("days"))).isoformat(),
            }
            await putsubuser(putdata)

            # if u["task"]:
            #     print("–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            # else:
            #     ...
            #     await start_task(user_id)
            # await subdevpost(data)

        if u["unique_code"]:
            unique_code=u["unique_code"]

        else:

            unique_code = str(uuid.uuid4())
            putdata = {
                "user_id": user_id,
                "unique_code": unique_code
            }
            await putsubuser(putdata)

        await client_add(user_id,unique_code)

        # try:
        #
        vless = ""
        try:
            if c_data[3]:
                vless = f"\n\n<code>vless://{unique_code}@88.218.93.116:443?type=tcp&security=reality&pbk=uspoUEMq2eiqHZVEx-HfVfvg4cmSv2BD7KWScoMl8xY&fp=chrome&sni=yahoo.com&sid=3a8982c07635&spx=%2F&flow=xtls-rprx-vision#KEDOVPN-{user_id}</code>"



            if c_name == "Android":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":"url>>https://play.google.com/store/apps/details?id=com.v2raytun.android",
                                               "–°–∫—Ä—ã—Ç—å":f'device_{c_id}_{c_name}_vless',"–ù–∞–∑–∞–¥":"connect"},mod=True),
                    parse_mode="HTML")

            elif c_name =="iPhone":
                await call.message.edit_text(
                   f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":"url>>https://apps.apple.com/ru/app/streisand/id6450534064",
                                               "–°–∫—Ä—ã—Ç—å":f'device_{c_id}_{c_name}_vless',"–ù–∞–∑–∞–¥":"connect"},mod=True),
                    parse_mode="HTML")

            elif c_name == "MacOS":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":"url>>https://apps.apple.com/ru/app/streisand/id6450534064",
                                               "–°–∫—Ä—ã—Ç—å":f'device_{c_id}_{c_name}_vless',"–ù–∞–∑–∞–¥":"connect"},mod=True),
                    parse_mode="HTML")

            elif c_name == "Windows":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":"url>>https://storage.v2raytun.com/v2RayTun_Setup.exe",
                                               "–°–∫—Ä—ã—Ç—å":f'device_{c_id}_{c_name}_vless',"–ù–∞–∑–∞–¥":"connect"},mod=True),
                    parse_mode="HTML")

        except:
            vless=""
            if c_name == "Android":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "url>>https://play.google.com/store/apps/details?id=com.v2raytun.android",
                                               "–ü–æ–¥–∫–ª—é—á–∏—Ç—å": f'device_{c_id}_{c_name}_vless', "–ù–∞–∑–∞–¥": "connect"},mod=True),
                    parse_mode="HTML")

            elif c_name == "iPhone":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "url>>https://apps.apple.com/ru/app/streisand/id6450534064",
                                               "–ü–æ–¥–∫–ª—é—á–∏—Ç—å": f'device_{c_id}_{c_name}_vless', "–ù–∞–∑–∞–¥": "connect"},mod=True),
                    parse_mode="HTML")

            elif c_name == "MacOS":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "url>>https://apps.apple.com/ru/app/streisand/id6450534064",
                                               "–ü–æ–¥–∫–ª—é—á–∏—Ç—å": f'device_{c_id}_{c_name}_vless', "–ù–∞–∑–∞–¥": "connect"},mod=True),
                    parse_mode="HTML")

            elif c_name == "Windows":
                await call.message.edit_text(
                    f'‚û°Ô∏è VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å 3 —à–∞–≥–∞:\n\n1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç\n<b>‚úÖ–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n2Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á-—Å—Å—ã–ª–∫—É\n<b>‚úÖ–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>{vless}\n\n3Ô∏è‚É£–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á-—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n<b>‚úÖ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>',
                    reply_markup=kbds.sharekb({"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": f"instr_{c_id}_{c_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "url>>https://storage.v2raytun.com/v2RayTun_Setup.exe",
                                               "–ü–æ–¥–∫–ª—é—á–∏—Ç—å": f'device_{c_id}_{c_name}_vless', "–ù–∞–∑–∞–¥": "connect"},mod=True),
                    parse_mode="HTML")

    else:
        await call.message.edit_text("–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –í–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞",reply_markup=kbds.createkb({"–ü–æ–¥–ø–∏—Å–∫–∞":"sub","–ù–∞–∑–∞–¥":"menu"}))

@user_private_router.callback_query(F.data.startswith("instr_"))
async def instr(call:types.CallbackQuery):
    device=call.data.split("_")
    device_id=device[1]
    device_name=device[2]
    device_inst={"Android":"‚û°Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VPN –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN –∫ Android. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç–∞. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun.\n\n‚û°Ô∏è –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ v2RayTun. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ: –ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç –∏ —Ç–µ–ø–µ—Ä—å VPN –∫ —Ä–∞–±–æ—Ç–µ –≥–æ—Ç–æ–≤.\n\n‚û°Ô∏è –¢–∞–∫ –∂–µ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è Kedo VPN, —Å–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
                 "iPhone":"‚û°Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VPN –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN –∫ iPhone. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç–∞. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand.\n\n‚û°Ô∏è –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ Streisand. –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É Streisand –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ: –î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞, –¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –∏ –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç –∏ —Ç–µ–ø–µ—Ä—å VPN –∫ —Ä–∞–±–æ—Ç–µ –≥–æ—Ç–æ–≤.\n\n‚û°Ô∏è –¢–∞–∫ –∂–µ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è Kedo VPN, —Å–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
                 "MacOS":"‚û°Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VPN –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN –∫ MacOS. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç–∞. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand.\n\n‚û°Ô∏è –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ Streisand. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Streisand, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–∏—Ä–∞–µ–º: –î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –Ω–∞–∂–∏–º–∞–µ–º –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Ç–µ–ø–µ—Ä—å VPN –∫ —Ä–∞–±–æ—Ç–µ –≥–æ—Ç–æ–≤.\n\n‚û°Ô∏è –¢–∞–∫ –∂–µ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è Kedo VPN, —Å–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
                 "Windows":"‚û°Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VPN –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN –∫ Windows. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–∞—á–∞–µ—Ç –í–∞–º –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç –≤ –ø–∞–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∫–∏¬ª. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun.\n\n‚û°Ô∏è –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ v2RayTun. –ó–∞–ø—É—Å—Ç–∏—Ç–µ v2RayTun, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–∏—Ä–∞–µ–º: –ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –Ω–∞–∂–∏–º–∞–µ–º –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ —Ç–µ–ø–µ—Ä—å VPN –∫ —Ä–∞–±–æ—Ç–µ –≥–æ—Ç–æ–≤.\n\n‚û°Ô∏è –¢–∞–∫ –∂–µ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è Kedo VPN, —Å–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ."}
    await call.message.edit_text(device_inst[device_name],reply_markup=kbds.sharekb({"–°–∫—Ä—ã—Ç—å": f"device_{device_id}_{device_name}",
                                               "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "url>>https://storage.v2raytun.com/v2RayTun_Setup.exe",
                                               "–ü–æ–¥–∫–ª—é—á–∏—Ç—å": f'device_{device_id}_{device_name}_vless', "–ù–∞–∑–∞–¥": "connect"},mod=True),)
    await call.answer()
@user_private_router.message(F.video)
async def video(mess:types.Message):
    await mess.reply(f"{mess.video.file_name}\n\n{mess.video.file_id}")
# file_id = ""
# @user_private_router.callback_query(F.data.startswith("download_exe"))
# async def exe(call:types.CallbackQuery,bot:Bot):
#     global file_id
#     user_id=call.from_user.id
#     if file_id!="":
#         await bot.send_document(user_id,file_id)
#     else:
#         fid=await bot.send_document(user_id,FSInputFile("NekoRay.exe"))
#         file_id=fid.document.file_id

@user_private_router.callback_query(F.data.startswith("deact_"))
async def deact(call:types.CallbackQuery):
    user_id = call.from_user.id
    # c=call.data.split("_")[1]
    u = await getuser(user_id)
    # data={
    #     "user_id":user_id,
    #     "device":c
    # }
    # user_data={
    #     "user_id": user_id,
    # }
    # ud = await get_user_device(user_data)
    # print(len(ud))
    # if len(ud)==1:
    putdata = {
        "user_id": user_id,
        "unique_code": "",
        "task":False,
        "pay":False
    }
    await putsubuser(putdata)
    await client_del(u["unique_code"])
    await deact_task(user_id)
    # await del_user_dev(data)
    await menu(call)
    # await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",reply_markup=kbds.createkb({"–ù–∞–∑–∞–¥":"menu"}))

@user_private_router.callback_query(F.data.startswith("my_device"))
async def my_device(call:types.CallbackQuery):
    user_id=call.from_user.id
    user_data=await getuser(user_id)
    print(user_data)
    l={}
    if user_data['task']:
        l["–û—Ç–∫–ª—é—á–∏—Ç—å"]="deact_{cd_name}"
    l["–ù–∞–∑–∞–¥"] = "menu"
    await call.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",reply_markup=kbds.createkb(l))
    # data={
    #     "user_id":user_id
    # }
    # d = await getdevice()
    # l1=[i["id"] for i in d]
    # # print(l1)
    # ud= await get_user_device(data)
    # l = {i["device_name"]: f'devicesett_{i["device_name"]}_{user_id}' for i in ud}
    # if ud:
    #     sorted_l = {
    #         k: v
    #         for k, v in sorted(
    #             l.items(),
    #             key=lambda item: next(d["device_id"] for d in ud if d["device_name"] == item[0])
    #         )
    #     }
    #
    #     sorted_l["–ù–∞–∑–∞–¥"] = "menu"
    #     await call.message.edit_text("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=kbds.createkb(sorted_l, 1, 1, back=True))
    # else:
    #     await call.message.edit_text("–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã",reply_markup=kbds.createkb({"–ù–∞–∑–∞–¥":"menu"},1,1))

@user_private_router.callback_query(F.data.startswith("devicesett_"))
async def my_devicesett(call:types.CallbackQuery):
    user_id=call.from_user.id
    cd=call.data.split("_")
    cd_name=cd[1]
    cd_user_id=cd[2]
    data={
        "user_id":user_id
    }
    ud= await get_user_device(data)
    l=[i["added_time"] if i["device_name"]==cd_name else None for i in ud]
    filtered_data = list(filter(lambda x: x is not None, l))
    date="".join(filtered_data).split("T")[0].replace("-",".")
    date_parts = date.split(".")
    reversed_date = ".".join(date_parts[::-1])


    await call.message.edit_text(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {cd_name}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {cd_user_id}\n\n–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {reversed_date}",reply_markup=kbds.createkb({"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è":f"conf_{cd_name}","–û—Ç–∫–ª—é—á–∏—Ç—å":f"deact_{cd_name}","–ù–∞–∑–∞–¥":"menu"},1,1,back=True))


@user_private_router.callback_query(F.data.startswith("conf_"))
async def conf(call:types.CallbackQuery):
    user_id=call.from_user.id
    device=call.data.split("_")[1]
    u = await getuser(user_id)
    unique_code=u["unique_code"]
    await call.message.edit_text(f"`vless://{unique_code}@88.218.93.116:443?type=tcp&security=reality&pbk=uspoUEMq2eiqHZVEx-HfVfvg4cmSv2BD7KWScoMl8xY&fp=chrome&sni=yahoo.com&sid=3a8982c07635&spx=%2F&flow=xtls-rprx-vision#KEDOVPN-{user_id}`",parse_mode="Markdown",reply_markup=kbds.createkb({"–ù–∞–∑–∞–¥":f"devicesett_{device}_{user_id}"}))

@user_private_router.callback_query(F.data.startswith("instr"))
async def instr_menu(call:types.CallbackQuery):
    await call.message.edit_text("1Ô∏è‚É£–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n2Ô∏è‚É£–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã\n\n3Ô∏è‚É£–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",reply_markup=kbds.createkb({"1":"podinstr_1","2":"podinstr_2","3":"podinstr_3","–ù–∞–∑–∞–¥":"menu"},3,3,back=True))

@user_private_router.callback_query(F.data.startswith("podinstr"))
async def podinstr(call:types.CallbackQuery):
    c=call.data.split("_")[1]
    try:
        if c == "1":
            await call.message.edit_text("–í Kedo VPN –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å YouTube —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ 4k, —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–º–µ–µ—Ç —Å–∫—Ä—ã—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ä–∞–∑–æ–º."
                                         , reply_markup=kbds.createkb({"1":"podinstr_1","2":"podinstr_2","3":"podinstr_3","–ù–∞–∑–∞–¥":"instr"},3,3,back=True))
        if c=="2":
            await call.message.edit_text('–°–ø–∞—Å–∞–π—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –æ—Ç –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Ä–æ–≥–∏—Ö vpn —Å–µ—Ä–≤–∏—Å–æ–≤. –°–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç–µ—Å—å Kedo VPN —á–µ—Ä–µ–∑ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',reply_markup=kbds.createkb({"1":"podinstr_1","2":"podinstr_2","3":"podinstr_3","–ù–∞–∑–∞–¥":"instr"},3,3,back=True))

        if c=="3":
            await call.message.edit_text("–ï—Å–ª–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ –±—é—Ä–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @kedoask911 –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",reply_markup=kbds.createkb({"1":"podinstr_1","2":"podinstr_2","3":"podinstr_3","–ù–∞–∑–∞–¥":"instr"},3,3,back=True))
    except:
        ...




@user_private_router.callback_query(F.data.startswith("wont_5"))
async def wont_5(call:types.CallbackQuery):
    user_id=call.from_user.id
    # u=await getuser(user_id)
    data = {
        "user_id": user_id,
        "days": 5 * 24 * 60 * 60,

    }


    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await putsubuser(data)
    await call.message.edit_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π!",reply_markup=kbds.createkb({"–û—Ç–ª–∏—á–Ω–æ":"thanks"}))

@user_private_router.callback_query(F.data.startswith("thanks"))
async def thanks(call:types.CallbackQuery,state:FSMContext):
    await call.message.delete()
    await state.clear()





from mailing_list import Mailing
@user_private_router.message(Command("mailing"))
async def startm(message:types.Message,state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.set_state(Mailing.text)


@user_private_router.message(Command("payout"))
async def payout(message:types.Message):
    await create_payout("100","5555555555554477","1")